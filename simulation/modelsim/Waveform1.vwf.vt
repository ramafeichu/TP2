// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2019 16:17:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Pipeline
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Pipeline_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ALU;
reg CLK2;
reg CLK3;
reg CLK4;
reg [34:0] CTEST_STAGE3;
reg [9:0] Dadd;
reg [34:0] IE_C;
reg KMx;
reg MR;
reg MW;
reg [5:0] OEA;
reg [5:0] OEB;
reg [1:0] SH;
reg [6:0] TYPE;
// wires                                               
wire [3:0] ALU_MIR;
wire [1:1] BIT1_T;
wire [9:0] Dadd_MIR;
wire HOLD;
wire [34:0] IE_C_MIR;
wire [1:1] KMx_MIR;
wire [1:1] MR_MIR;
wire [1:1] MW_MIR;
wire [5:0] OEA_MIR;
wire [5:0] OEB_MIR;
wire [1:0] SH_MIR;
wire testigo_IE_C_stage3;
wire testigo_IE_C_stage4;
wire testigo_IE_C_stage5;

// assign statements (if any)                          
Pipeline i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.ALU_MIR(ALU_MIR),
	.BIT1_T(BIT1_T),
	.CLK2(CLK2),
	.CLK3(CLK3),
	.CLK4(CLK4),
	.CTEST_STAGE3(CTEST_STAGE3),
	.Dadd(Dadd),
	.Dadd_MIR(Dadd_MIR),
	.HOLD(HOLD),
	.IE_C(IE_C),
	.IE_C_MIR(IE_C_MIR),
	.KMx(KMx),
	.KMx_MIR(KMx_MIR),
	.MR(MR),
	.MR_MIR(MR_MIR),
	.MW(MW),
	.MW_MIR(MW_MIR),
	.OEA(OEA),
	.OEA_MIR(OEA_MIR),
	.OEB(OEB),
	.OEB_MIR(OEB_MIR),
	.SH(SH),
	.SH_MIR(SH_MIR),
	.testigo_IE_C_stage3(testigo_IE_C_stage3),
	.testigo_IE_C_stage4(testigo_IE_C_stage4),
	.testigo_IE_C_stage5(testigo_IE_C_stage5),
	.\TYPE (TYPE)
);
initial 
begin 
#1000000 $stop;
end 

// CLK2
initial
begin
	repeat(12)
	begin
		CLK2 = 1'b0;
		CLK2 = #40000 1'b1;
		# 40000;
	end
	CLK2 = 1'b0;
end 

// CLK3
initial
begin
	repeat(12)
	begin
		CLK3 = 1'b0;
		CLK3 = #40000 1'b1;
		# 40000;
	end
	CLK3 = 1'b0;
end 

// CLK4
initial
begin
	repeat(12)
	begin
		CLK4 = 1'b0;
		CLK4 = #40000 1'b1;
		# 40000;
	end
	CLK4 = 1'b0;
end 
// Dadd[ 9 ]
initial
begin
	Dadd[9] = 1'b0;
end 
// Dadd[ 8 ]
initial
begin
	Dadd[8] = 1'b0;
end 
// Dadd[ 7 ]
initial
begin
	Dadd[7] = 1'b0;
end 
// Dadd[ 6 ]
initial
begin
	Dadd[6] = 1'b0;
end 
// Dadd[ 5 ]
initial
begin
	Dadd[5] = 1'b0;
end 
// Dadd[ 4 ]
initial
begin
	Dadd[4] = 1'b0;
end 
// Dadd[ 3 ]
initial
begin
	Dadd[3] = 1'b0;
end 
// Dadd[ 2 ]
initial
begin
	Dadd[2] = 1'b0;
end 
// Dadd[ 1 ]
initial
begin
	Dadd[1] = 1'b0;
end 
// Dadd[ 0 ]
initial
begin
	Dadd[0] = 1'b0;
end 
// ALU[ 3 ]
initial
begin
	ALU[3] = 1'b0;
end 
// ALU[ 2 ]
initial
begin
	ALU[2] = 1'b0;
end 
// ALU[ 1 ]
initial
begin
	ALU[1] = 1'b0;
end 
// ALU[ 0 ]
initial
begin
	ALU[0] = 1'b1;
	ALU[0] = #80000 1'b0;
end 
// SH[ 1 ]
initial
begin
	SH[1] = 1'b0;
end 
// SH[ 0 ]
initial
begin
	SH[0] = 1'b1;
	SH[0] = #80000 1'b0;
end 
// OEA[ 5 ]
initial
begin
	OEA[5] = 1'b0;
end 
// OEA[ 4 ]
initial
begin
	OEA[4] = 1'b0;
end 
// OEA[ 3 ]
initial
begin
	OEA[3] = 1'b0;
end 
// OEA[ 2 ]
initial
begin
	OEA[2] = 1'b0;
end 
// OEA[ 1 ]
initial
begin
	OEA[1] = 1'b0;
end 
// OEA[ 0 ]
initial
begin
	OEA[0] = 1'b0;
end 
// OEB[ 5 ]
initial
begin
	OEB[5] = 1'b1;
	OEB[5] = #80000 1'b0;
end 
// OEB[ 4 ]
initial
begin
	OEB[4] = 1'b0;
end 
// OEB[ 3 ]
initial
begin
	OEB[3] = 1'b0;
end 
// OEB[ 2 ]
initial
begin
	OEB[2] = 1'b0;
end 
// OEB[ 1 ]
initial
begin
	OEB[1] = 1'b1;
	OEB[1] = #80000 1'b0;
end 
// OEB[ 0 ]
initial
begin
	OEB[0] = 1'b0;
end 
// IE_C[ 34 ]
initial
begin
	IE_C[34] = 1'b0;
end 
// IE_C[ 33 ]
initial
begin
	IE_C[33] = 1'b0;
end 
// IE_C[ 32 ]
initial
begin
	IE_C[32] = 1'b0;
end 
// IE_C[ 31 ]
initial
begin
	IE_C[31] = 1'b0;
end 
// IE_C[ 30 ]
initial
begin
	IE_C[30] = 1'b0;
end 
// IE_C[ 29 ]
initial
begin
	IE_C[29] = 1'b0;
end 
// IE_C[ 28 ]
initial
begin
	IE_C[28] = 1'b0;
end 
// IE_C[ 27 ]
initial
begin
	IE_C[27] = 1'b0;
end 
// IE_C[ 26 ]
initial
begin
	IE_C[26] = 1'b0;
end 
// IE_C[ 25 ]
initial
begin
	IE_C[25] = 1'b0;
end 
// IE_C[ 24 ]
initial
begin
	IE_C[24] = 1'b0;
end 
// IE_C[ 23 ]
initial
begin
	IE_C[23] = 1'b0;
end 
// IE_C[ 22 ]
initial
begin
	IE_C[22] = 1'b0;
end 
// IE_C[ 21 ]
initial
begin
	IE_C[21] = 1'b0;
end 
// IE_C[ 20 ]
initial
begin
	IE_C[20] = 1'b0;
end 
// IE_C[ 19 ]
initial
begin
	IE_C[19] = 1'b0;
end 
// IE_C[ 18 ]
initial
begin
	IE_C[18] = 1'b0;
end 
// IE_C[ 17 ]
initial
begin
	IE_C[17] = 1'b0;
end 
// IE_C[ 16 ]
initial
begin
	IE_C[16] = 1'b0;
end 
// IE_C[ 15 ]
initial
begin
	IE_C[15] = 1'b0;
end 
// IE_C[ 14 ]
initial
begin
	IE_C[14] = 1'b0;
end 
// IE_C[ 13 ]
initial
begin
	IE_C[13] = 1'b0;
end 
// IE_C[ 12 ]
initial
begin
	IE_C[12] = 1'b0;
end 
// IE_C[ 11 ]
initial
begin
	IE_C[11] = 1'b0;
end 
// IE_C[ 10 ]
initial
begin
	IE_C[10] = 1'b0;
end 
// IE_C[ 9 ]
initial
begin
	IE_C[9] = 1'b0;
end 
// IE_C[ 8 ]
initial
begin
	IE_C[8] = 1'b0;
end 
// IE_C[ 7 ]
initial
begin
	IE_C[7] = 1'b0;
end 
// IE_C[ 6 ]
initial
begin
	IE_C[6] = 1'b0;
end 
// IE_C[ 5 ]
initial
begin
	IE_C[5] = 1'b0;
end 
// IE_C[ 4 ]
initial
begin
	IE_C[4] = 1'b0;
	IE_C[4] = #80000 1'b1;
	IE_C[4] = #80000 1'b0;
end 
// IE_C[ 3 ]
initial
begin
	IE_C[3] = 1'b0;
end 
// IE_C[ 2 ]
initial
begin
	IE_C[2] = 1'b0;
end 
// IE_C[ 1 ]
initial
begin
	IE_C[1] = 1'b0;
	IE_C[1] = #80000 1'b1;
	IE_C[1] = #80000 1'b0;
end 
// IE_C[ 0 ]
initial
begin
	IE_C[0] = 1'b1;
	IE_C[0] = #80000 1'b0;
end 
// \TYPE [ 6 ]
initial
begin
	TYPE[6] = 1'b0;
end 
// \TYPE [ 5 ]
initial
begin
	TYPE[5] = 1'b0;
end 
// \TYPE [ 4 ]
initial
begin
	TYPE[4] = 1'b0;
end 
// \TYPE [ 3 ]
initial
begin
	TYPE[3] = 1'b1;
	TYPE[3] = #80000 1'b0;
end 
// \TYPE [ 2 ]
initial
begin
	TYPE[2] = 1'b0;
end 
// \TYPE [ 1 ]
initial
begin
	TYPE[1] = 1'b0;
end 
// \TYPE [ 0 ]
initial
begin
	TYPE[0] = 1'b1;
	TYPE[0] = #80000 1'b0;
end 

// MW
initial
begin
	MW = 1'b0;
end 

// MR
initial
begin
	MR = 1'b0;
end 

// KMx
initial
begin
	KMx = 1'b0;
	KMx = #80000 1'b1;
	KMx = #80000 1'b0;
end 
endmodule

