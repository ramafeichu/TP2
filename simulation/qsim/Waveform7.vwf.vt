// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/22/2019 15:15:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          regbank_mainBlock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regbank_mainBlock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] C;
reg [34:0] C_IEN;
reg CLK;
reg MR;
reg MW;
reg [5:0] SEL_A;
reg [5:0] SEL_B;
reg [15:0] treg_WR;
// wires                                               
wire [15:0] A;
wire [15:0] B;
wire [15:0] WR;

// assign statements (if any)                          
assign WR = treg_WR;
regbank_mainBlock i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.C_IEN(C_IEN),
	.CLK(CLK),
	.MR(MR),
	.MW(MW),
	.SEL_A(SEL_A),
	.SEL_B(SEL_B),
	.WR(WR)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b1;
	CLK = #80000 1'b0;
	# 80000;
	repeat(5)
	begin
		CLK = 1'b1;
		CLK = #80000 1'b0;
		# 80000;
	end
	CLK = 1'b1;
end 

// MR
initial
begin
	MR = 1'b0;
end 

// MW
initial
begin
	MW = 1'b1;
	MW = #490000 1'b0;
end 
// C_IEN[ 34 ]
initial
begin
	C_IEN[34] = 1'b1;
	C_IEN[34] = #320000 1'b0;
end 
// C_IEN[ 33 ]
initial
begin
	C_IEN[33] = 1'b0;
end 
// C_IEN[ 32 ]
initial
begin
	C_IEN[32] = 1'b0;
end 
// C_IEN[ 31 ]
initial
begin
	C_IEN[31] = 1'b0;
end 
// C_IEN[ 30 ]
initial
begin
	C_IEN[30] = 1'b0;
end 
// C_IEN[ 29 ]
initial
begin
	C_IEN[29] = 1'b0;
end 
// C_IEN[ 28 ]
initial
begin
	C_IEN[28] = 1'b0;
end 
// C_IEN[ 27 ]
initial
begin
	C_IEN[27] = 1'b0;
end 
// C_IEN[ 26 ]
initial
begin
	C_IEN[26] = 1'b0;
end 
// C_IEN[ 25 ]
initial
begin
	C_IEN[25] = 1'b0;
end 
// C_IEN[ 24 ]
initial
begin
	C_IEN[24] = 1'b0;
end 
// C_IEN[ 23 ]
initial
begin
	C_IEN[23] = 1'b0;
end 
// C_IEN[ 22 ]
initial
begin
	C_IEN[22] = 1'b0;
end 
// C_IEN[ 21 ]
initial
begin
	C_IEN[21] = 1'b0;
end 
// C_IEN[ 20 ]
initial
begin
	C_IEN[20] = 1'b0;
end 
// C_IEN[ 19 ]
initial
begin
	C_IEN[19] = 1'b0;
end 
// C_IEN[ 18 ]
initial
begin
	C_IEN[18] = 1'b0;
end 
// C_IEN[ 17 ]
initial
begin
	C_IEN[17] = 1'b0;
end 
// C_IEN[ 16 ]
initial
begin
	C_IEN[16] = 1'b0;
end 
// C_IEN[ 15 ]
initial
begin
	C_IEN[15] = 1'b0;
end 
// C_IEN[ 14 ]
initial
begin
	C_IEN[14] = 1'b0;
end 
// C_IEN[ 13 ]
initial
begin
	C_IEN[13] = 1'b0;
end 
// C_IEN[ 12 ]
initial
begin
	C_IEN[12] = 1'b0;
end 
// C_IEN[ 11 ]
initial
begin
	C_IEN[11] = 1'b0;
end 
// C_IEN[ 10 ]
initial
begin
	C_IEN[10] = 1'b0;
end 
// C_IEN[ 9 ]
initial
begin
	C_IEN[9] = 1'b0;
end 
// C_IEN[ 8 ]
initial
begin
	C_IEN[8] = 1'b0;
end 
// C_IEN[ 7 ]
initial
begin
	C_IEN[7] = 1'b0;
end 
// C_IEN[ 6 ]
initial
begin
	C_IEN[6] = 1'b0;
end 
// C_IEN[ 5 ]
initial
begin
	C_IEN[5] = 1'b0;
end 
// C_IEN[ 4 ]
initial
begin
	C_IEN[4] = 1'b0;
end 
// C_IEN[ 3 ]
initial
begin
	C_IEN[3] = 1'b0;
end 
// C_IEN[ 2 ]
initial
begin
	C_IEN[2] = 1'b0;
end 
// C_IEN[ 1 ]
initial
begin
	C_IEN[1] = 1'b0;
end 
// C_IEN[ 0 ]
initial
begin
	C_IEN[0] = 1'b0;
end 
// C[ 15 ]
initial
begin
	C[15] = 1'b0;
end 
// C[ 14 ]
initial
begin
	C[14] = 1'b0;
end 
// C[ 13 ]
initial
begin
	C[13] = 1'b0;
end 
// C[ 12 ]
initial
begin
	C[12] = 1'b0;
end 
// C[ 11 ]
initial
begin
	C[11] = 1'b0;
end 
// C[ 10 ]
initial
begin
	C[10] = 1'b0;
end 
// C[ 9 ]
initial
begin
	C[9] = 1'b0;
end 
// C[ 8 ]
initial
begin
	C[8] = 1'b0;
end 
// C[ 7 ]
initial
begin
	C[7] = 1'b0;
end 
// C[ 6 ]
initial
begin
	C[6] = 1'b0;
end 
// C[ 5 ]
initial
begin
	C[5] = 1'b0;
end 
// C[ 4 ]
initial
begin
	C[4] = 1'b0;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b1;
	C[2] = #320000 1'b0;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b1;
	C[1] = #320000 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b1;
	C[0] = #320000 1'b0;
end 
// SEL_A[ 5 ]
initial
begin
	SEL_A[5] = 1'b0;
end 
// SEL_A[ 4 ]
initial
begin
	SEL_A[4] = 1'b0;
end 
// SEL_A[ 3 ]
initial
begin
	SEL_A[3] = 1'b0;
end 
// SEL_A[ 2 ]
initial
begin
	SEL_A[2] = 1'b0;
end 
// SEL_A[ 1 ]
initial
begin
	SEL_A[1] = 1'b0;
end 
// SEL_A[ 0 ]
initial
begin
	SEL_A[0] = 1'b0;
end 
// SEL_B[ 5 ]
initial
begin
	SEL_B[5] = 1'b0;
end 
// SEL_B[ 4 ]
initial
begin
	SEL_B[4] = 1'b0;
end 
// SEL_B[ 3 ]
initial
begin
	SEL_B[3] = 1'b0;
end 
// SEL_B[ 2 ]
initial
begin
	SEL_B[2] = 1'b0;
end 
// SEL_B[ 1 ]
initial
begin
	SEL_B[1] = 1'b0;
end 
// SEL_B[ 0 ]
initial
begin
	SEL_B[0] = 1'b0;
end 
// WR[ 15 ]
initial
begin
	treg_WR[15] = 1'bZ;
end 
// WR[ 14 ]
initial
begin
	treg_WR[14] = 1'bZ;
end 
// WR[ 13 ]
initial
begin
	treg_WR[13] = 1'bZ;
end 
// WR[ 12 ]
initial
begin
	treg_WR[12] = 1'bZ;
end 
// WR[ 11 ]
initial
begin
	treg_WR[11] = 1'bZ;
end 
// WR[ 10 ]
initial
begin
	treg_WR[10] = 1'bZ;
end 
// WR[ 9 ]
initial
begin
	treg_WR[9] = 1'bZ;
end 
// WR[ 8 ]
initial
begin
	treg_WR[8] = 1'bZ;
end 
// WR[ 7 ]
initial
begin
	treg_WR[7] = 1'bZ;
end 
// WR[ 6 ]
initial
begin
	treg_WR[6] = 1'bZ;
end 
// WR[ 5 ]
initial
begin
	treg_WR[5] = 1'bZ;
end 
// WR[ 4 ]
initial
begin
	treg_WR[4] = 1'bZ;
end 
// WR[ 3 ]
initial
begin
	treg_WR[3] = 1'bZ;
end 
// WR[ 2 ]
initial
begin
	treg_WR[2] = 1'bZ;
end 
// WR[ 1 ]
initial
begin
	treg_WR[1] = 1'bZ;
end 
// WR[ 0 ]
initial
begin
	treg_WR[0] = 1'bZ;
end 
endmodule

