// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2019 14:51:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLKx2;
reg LATCH_A_EN;
reg LATCH_B_EN;
reg LATCH_C_EN;
reg LATCH_MUXB_EN;
// wires                                               
wire [3:0] ALUC;
wire [3:0] ALUC_ROM;
wire [15:0] BUS_A;
wire [15:0] BUS_b;
wire [15:0] BUS_C;
wire C_IEN;
wire CARRY;
wire [13:0] INSTRUCTION;
wire [15:0] KMUX;
wire [1:1] KMx_ROM;
wire [1:1] KMxTEST;
wire [1:1] MR;
wire [1:1] MW;
wire TEST_HOLD;
wire [15:0] W_R;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.ALUC(ALUC),
	.ALUC_ROM(ALUC_ROM),
	.BUS_A(BUS_A),
	.BUS_b(BUS_b),
	.BUS_C(BUS_C),
	.C_IEN(C_IEN),
	.CARRY(CARRY),
	.CLK(CLK),
	.CLKx2(CLKx2),
	.INSTRUCTION(INSTRUCTION),
	.KMUX(KMUX),
	.KMx_ROM(KMx_ROM),
	.KMxTEST(KMxTEST),
	.LATCH_A_EN(LATCH_A_EN),
	.LATCH_B_EN(LATCH_B_EN),
	.LATCH_C_EN(LATCH_C_EN),
	.LATCH_MUXB_EN(LATCH_MUXB_EN),
	.MR(MR),
	.MW(MW),
	.TEST_HOLD(TEST_HOLD),
	.W_R(W_R)
);
initial 
begin 
#1000000 $finish;
end 

// CLKx2
always
begin
	CLKx2 = 1'b0;
	CLKx2 = #10000 1'b1;
	#10000;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 

// LATCH_A_EN
initial
begin
	LATCH_A_EN = 1'b1;
end 

// LATCH_B_EN
initial
begin
	LATCH_B_EN = 1'b1;
end 

// LATCH_C_EN
initial
begin
	LATCH_C_EN = 1'b1;
end 

// LATCH_MUXB_EN
initial
begin
	LATCH_MUXB_EN = 1'b1;
end 
endmodule

