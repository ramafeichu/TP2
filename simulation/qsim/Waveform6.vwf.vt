// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/23/2019 19:00:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLOCK_UC1;
reg CLOCKx2;
// wires                                               
wire [3:0] ALU_ROM;
wire [3:0] ALUC;
wire [15:0] BUS_A;
wire [15:0] BUS_B;
wire [15:0] BUS_C;
wire [34:0] C_ENABLE;
wire [9:0] Dadd;
wire HOLD;
wire [15:0] IN_RAM;
wire [13:0] INSTRUCTION;
wire [15:0] KMUX;
wire KMx_SEL;
wire MR;
wire MW;
wire [15:0] OUT_RAM;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.ALU_ROM(ALU_ROM),
	.ALUC(ALUC),
	.BUS_A(BUS_A),
	.BUS_B(BUS_B),
	.BUS_C(BUS_C),
	.C_ENABLE(C_ENABLE),
	.CLK(CLK),
	.CLOCK_UC1(CLOCK_UC1),
	.CLOCKx2(CLOCKx2),
	.Dadd(Dadd),
	.HOLD(HOLD),
	.IN_RAM(IN_RAM),
	.INSTRUCTION(INSTRUCTION),
	.KMUX(KMUX),
	.KMx_SEL(KMx_SEL),
	.MR(MR),
	.MW(MW),
	.OUT_RAM(OUT_RAM)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// CLOCK_UC1
initial
begin
	CLOCK_UC1 = 1'b1;
	CLOCK_UC1 = #10000 1'b0;
	# 10000;
	repeat(48)
	begin
		CLOCK_UC1 = 1'b1;
		CLOCK_UC1 = #10000 1'b0;
		# 10000;
	end
	CLOCK_UC1 = 1'b1;
	CLOCK_UC1 = #10000 1'b0;
end 

// CLOCKx2
initial
begin
	CLOCKx2 = 1'b1;
	CLOCKx2 = #2500 1'b0;
	# 2500;
	repeat(198)
	begin
		CLOCKx2 = 1'b1;
		CLOCKx2 = #2500 1'b0;
		# 2500;
	end
	CLOCKx2 = 1'b1;
	CLOCKx2 = #2500 1'b0;
end 
endmodule

